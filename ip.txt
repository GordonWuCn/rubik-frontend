class on_every_layout(layout):
    srcip = Bit(32)
    dstip = Bit(32)
    
class some_layout(layout):
    type_id = Bit(16, const=0x1)
    port = Bit(16, ntohl=True)
    option_len = Bit(16)
    option = Bit(option_len << 2)

def tcp_parser(ip):
    pass

ip = ip_parser()
tcp = tcp_parser(ip)


def ip_parser():
    ip = Connectionless()
    ip.header = ip_header_layout
    ip.header += If(ip.header.xxx == 1) >> ip_header_layout2 >> Else() >> ip_header_layout3
    ip.header += While(ip.header.cursor < ip.header.option_len) >> Any(op1, op2, op3)
    ip.selector = ([ip.header.srcip], [ip.header.dstip])
    ip.temp = ip_temp_layout
    ip.preprocess = Assign(ip.temp.offset, ((ip.header.f1 << 8) + ip.header.f2) << 3)
    ip.seq = Sequence(meta=ip.temp.offset, data=ip.payload, data_len=ip.payload_len)
    DUMP = PSMState(start=True, accept=True)
    FRAG, OTHER1, OTHER2 = PSMState(3)
    ip.psm = PSM(DUMP, FRAG)
    ip.psm.dump = DUMP >> DUMP + Predicate(ip.header.dont_frag == 1)
    ip.psm.frag = DUMP >> FRAG + Predicate(ip.header.more_frag == 1)
    ip.psm.more = FRAG >> FRAG + Predicate(ip.header.more_frag == 1)
    ip.psm.last = FRAG >> DUMP + Predicate(ip.v.header.more_frag == 0)
    ip.event.assemble = If(ip.psm.dump or ip.psm.last) >> ip.seq.assemble()
    return ip

# user defined event demo
ip = ip_parser()
ip.event.on_every = If(true) >> Assign(on_every_layout.srcip, on_every_layout.srcip) + callback(on_every_layout)


stack = Stack()
stack.eth = eth
stack.ip = stack.eth >> ip_parser()
stack.udp = stack.ip >> If(
    (stack.ip.psm.last or stack.ip.psm.dump) and stack.ip.header.protocol == 17
) >> udp
stack.gtp = stack.udp >> gtp
stack.gtp_ip = stack.gtp >> If(stack.gtp.header.MT == 255) >> ip_parser()
gtp_ip_dump = stack.gtp_ip.psm.last or stack.gtp_ip.psm.dump
stack.gtp_tcp = stack.gtp_ip >> If(gtp_ip_dump and stack.gtp_ip.header.protocol == 6) >> tcp
stack.gtp_udp = stack.gtp_ip >> If(gtp_ip_dump and stack.gtp_ip.header.protocol == 17) >> udp

class on_every_high_udp_layout(layout):
    srcip = bit(32)
    dstip = bit(32)
stack.event.on_every_high_udp = If(stack.gtp_udp) >> Assign(...) + callback(on_every_high_udp_layout)
